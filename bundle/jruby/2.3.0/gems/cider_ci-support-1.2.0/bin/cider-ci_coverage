#!/usr/bin/env ruby
###############################################################################
# This script gathers ruby coverage information from a cider-ci instance and
# aggregates it via simplecov.
#
# Authors: Thomas Schank <DrTom@schank.ch>
#
###############################################################################

#  Planned features for the future:
#
# * upload result to cider-ci (attachments to the tree_id)

require 'fileutils'
require 'json_roa/client'
require 'optparse'
require 'ostruct'
require 'simplecov'
require 'thread/future'
require 'thread/pool'
require 'mime/types'
require 'open-uri'

###############################################################################
# Globals (this is a script after all)
###############################################################################

Thread.abort_on_exception = true
@debug = false
@pool = nil

###############################################################################
# Download from Cider-CI
###############################################################################

def connect(base_url, username, password)
  JSON_ROA::Client.connect base_url do |conn|
    conn.basic_auth(username, password)
    conn.ssl.verify = false
  end
end

def get_execution_resource(root, execution_id)
  root.relation('execution').get('id' => execution_id)
end

def print_progress_and_debug(separator = '.', msg = '')
  if @debug
    puts separator.to_s + " " + msg.to_s
  else
    print separator
    STDOUT.flush
  end
end

def get_and_convert_resultset_attachments(root, tree_id)
  print 'download_resultset_attachments'; STDOUT.flush

  root.relation('executions').get('treeid' => tree_id).collection \
    .map(&:get).map do |execution|
    execution.relation('tasks').get('state' => 'passed').collection\
      .map do |task_relation|
      Thread.future @pool do
        print_progress_and_debug('', task_relation)
        task_relation.get.relation('trials') \
          .get('state' => 'passed').collection.map(&:get).map do |trial|
          print_progress_and_debug('.', trial)
          trial.relation('trial-attachments') \
            .get.collection.map do |tar|
            print_progress_and_debug('.', "getting #{tar}")
            trial_attachment_resource = tar.get
            if (working_dir = trial.data['scripts'] \
                .map { |_k, v| v['working_dir'] }.compact.first) \
              && (trial_attachment_resource.data['path'] =~ /resultset\.json/)
              result_data_relation = trial_attachment_resource \
                                     .relation('trial-attachment-data-stream')
              print_progress_and_debug('*', "getting #{result_data_relation}")
              resultset = result_data_relation.get.response.body
              print_progress_and_debug('*', "converting resultset") 
              convert_resultset resultset, working_dir
            end
          end
        end
      end
    end.map { |f| f.value!(3) }
  end.flatten.compact
end

###############################################################################
# Upload
###############################################################################

def upload_as_tree_attachments(root, tree_id)
  print 'upload_as_tree_attachments'; STDOUT.flush

  Dir.glob('coverage/**/*').each do |filename|
    content_type = MIME::Types.of(filename).first.content_type rescue nil
    if content_type
      Faraday::UploadIO.new(filename, content_type)
      root.relation('tree-attachment-data-stream').put(
        { 'treeid' => tree_id, 'path' => filename },
        File.open(filename, 'rb').read, 'content-type' => content_type)
      print_progress_and_debug('*')
    end
  end
  puts ''
end

###############################################################################
# Simplev cov
###############################################################################

def convert_resultset(resultset, working_dir)
  SimpleCov::JSON.parse(resultset.to_json).map do |command_name, data|
    [command_name, data.map do |k, v|
      case k
      when 'coverage'
        [k, v.map do |filename, file_coverage|
          [(FileUtils.pwd + filename[working_dir.length, filename.length]) \
           , file_coverage]
        end.instance_eval { Hash[self] }]
      else
        [k, v]
      end
    end.instance_eval { Hash[self] }]
  end.instance_eval { Hash[self] }.instance_eval do
    SimpleCov::Result.from_hash(self)
  end
end

def reduce_resultsets(resultsets)
  puts 'reduce_resultsets'
  resultsets.reduce({}) do |agg, resultset|
    resultset.original_result.merge_resultset(agg)
  end
end

def init_simple_cov
  SimpleCov.add_group 'Models', 'app/models'
  SimpleCov.add_group 'Controllers', 'app/controllers'
  SimpleCov.add_group 'Views', 'app/views'
  SimpleCov.add_group 'Helpers', 'app/helpers'
  SimpleCov.add_group 'Factories', 'factories'
  SimpleCov.add_group 'Libraries', 'app/lib'
end

###############################################################################
# Run
###############################################################################

def run_coverage(root, tree_id)
  get_and_convert_resultset_attachments(root, tree_id).instance_eval do
    reduce_resultsets self
  end.instance_eval do
    if self.empty?
      fail ScriptError, 'the collected and reduced coverage result is empty'
    end
    init_simple_cov
    SimpleCov::Result.new self
  end.instance_eval do
    SimpleCov::Formatter::HTMLFormatter.new.format self
    self
  end
end

###############################################################################
# Git 
###############################################################################

def assert_correct_tree_id(execution)
  if execution.data['tree_id'] != `git log -n 1 --pretty=%T`.strip
    fail ScriptError, 'you must be on the same tree_id as the execution'
  end
end

def get_current_tree_id
  begin
    tree_id = `"git" "log" "-n" "1" "--pretty=%T"`.strip
  rescue _
    raise ScriptError, 'could not determine the current tree_id'
  end

  if $?.exitstatus != 0 
    raise ScriptError, "could not determine the current tree_id"
  else
    tree_id
  end
end

###############################################################################
# Thread pool
###############################################################################

def set_thread_pool(thread_pool_size)
  @pool = Thread.pool thread_pool_size  
end

###############################################################################
# Options, main ....
###############################################################################

def parse_options(options)
  OptionParser.new do |opts|
    opts.banner = 'Usage: cider-ci_coverage'

    opts.on('-a', '--api-url API-URL') do |url|
      options.api_url = url
    end

    opts.on('-e', '--execution EXECUTION_ID',
            'Execution ID to retrieve coverage for') do |exid|
      options.execution_id = exid
    end

    opts.on('-t', '--thread-pool-size N', Integer) do |t|
      options.thread_pool_size = t
    end

    opts.on('-u', '--username NAME', String) do |n|
      options.username = n
    end

    opts.on('-p', '--password PASSWORD', String) do |p|
      options.password = p
    end

    opts.on('-u', '--upload') do
      options.upload = true
    end

    opts.on('-d', '--debug') do
      @debug = true
    end

    opts.on('-l', '--limit N', Integer)  do |l|
      options.limit = l
    end
  end.parse!

  options
end

def main
  options = OpenStruct.new
  options.thread_pool_size = 50
  options.username = ENV['CIDER_CI_USERNAME']
  options.password = ENV['CIDER_CI_PASSWORD']
  options.api_url = ENV['CIDER_CI_API_URL']
  options.upload = false
  options.limit = 95
  parse_options options
  options.api_url || fail(OptionParser::MissingArgument \
                                , 'api_url is required, set CIDER_CI_API_URL \
                                or provide -a option')
  options.username || fail(OptionParser::MissingArgument \
                            , 'username is required, set CIDER_CI_USERNAME')
  options.password || fail(OptionParser::MissingArgument \
                            , 'password is required, set CIDER_CI_PASSWORD')

  root = connect(options.api_url, options.username, options.password).get
  tree_id = get_current_tree_id
  set_thread_pool options.thread_pool_size
  FileUtils.rm_rf('coverage')
  result = run_coverage root, tree_id
  upload_as_tree_attachments root, tree_id if options.upload

  coverage = (result.covered_lines / result.total_lines.to_f)

  write_result_json coverage, options.limit

  if passed? coverage, options.limit
    exit
  else
    abort("FAILED coverage at #{per_cent(coverage)}% is \
          below limit of #{options.limit}% ")
  end
end

def write_result_json(coverage, limit)
  result_message = passed?(coverage, limit) ? 'passed' : 'failed'
  File.open('result.json', 'w')  do |file|
    file.write({ value: coverage,
                 summary: "#{result_message} with #{per_cent(coverage)}%"
    }.to_json)
  end
end

def passed?(coverage, limit)
  coverage > limit / 100.0
end

def per_cent(relative_value)
  (relative_value * 100.0).round(2)
end

main
